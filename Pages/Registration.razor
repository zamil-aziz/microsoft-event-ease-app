@page "/registration"
@using EventEaseApp.Models
@using System.ComponentModel.DataAnnotations

<div class="max-w-md mx-auto p-6">
    <h1 class="text-3xl font-bold mb-6">Event Registration</h1>

    @if (selectedEvent != null)
    {
        <div class="mb-6 p-4 bg-gray-100 rounded-lg">
            <h2 class="text-xl font-semibold mb-2">@selectedEvent.Name</h2>
            <p class="text-gray-600">@selectedEvent.Date.ToShortDateString()</p>
            <p class="text-gray-600">@selectedEvent.Location</p>
        </div>
    }

    <EditForm Model="@registrationModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="mb-4">
            <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
            <InputText id="name" @bind-Value="registrationModel.Name"
                class="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500" />
            <ValidationMessage For="@(() => registrationModel.Name)" class="text-red-500 text-sm" />
        </div>

        <div class="mb-4">
            <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <InputText id="email" @bind-Value="registrationModel.Email"
                class="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500" />
            <ValidationMessage For="@(() => registrationModel.Email)" class="text-red-500 text-sm" />
        </div>

        <button type="submit"
            class="w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 transition-colors">
            Register
        </button>
    </EditForm>

    @if (showSuccessMessage)
    {
        <div class="mt-4 p-4 bg-green-100 text-green-700 rounded">
            Registration successful! Thank you for registering.
        </div>
    }
</div>

@code {
    private RegistrationModel registrationModel = new();
    private EventModel? selectedEvent;
    private bool showSuccessMessage;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (int.TryParse(queryString["eventId"], out int eventId))
        {
            registrationModel.EventId = eventId;
            selectedEvent = GetEventById(eventId);
        }
    }

    private EventModel? GetEventById(int id)
    {
        // Mock data - in a real app, this would come from a service
        var events = new List<EventModel>
{
new EventModel
{
Id = 1,
Name = "Tech Conference 2024",
Date = new DateTime(2024, 4, 15),
Location = "San Francisco"
},
new EventModel
{
Id = 2,
Name = "Music Festival",
Date = new DateTime(2024, 5, 20),
Location = "New York"
}
};

        return events.FirstOrDefault(e => e.Id == id);
    }

    private async Task HandleValidSubmit()
    {
        // In a real app, you would save to a database here
        showSuccessMessage = true;
        await Task.Delay(2000); // Show success message for 2 seconds
        NavigationManager.NavigateTo("/");
    }
}
